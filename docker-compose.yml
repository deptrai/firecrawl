services:
  redis:
    image: redis:7-alpine
    container_name: firecrawl-redis
    restart: unless-stopped
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    networks:
      - firecrawl-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  postgres:
    image: postgres:15-alpine
    container_name: firecrawl-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-firecrawl}
      POSTGRES_USER: ${POSTGRES_USER:-firecrawl}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-your_secure_password_here}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - firecrawl-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-firecrawl}"]
      interval: 30s
      timeout: 10s
      retries: 3

  playwright-service:
    image: ghcr.io/mendableai/firecrawl-playwright:latest
    container_name: firecrawl-playwright
    restart: unless-stopped
    environment:
      PORT: 3000
    networks:
      - firecrawl-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  web:
    image: ghcr.io/mendableai/firecrawl:latest
    container_name: firecrawl-api
    restart: unless-stopped
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
      playwright-service:
        condition: service_healthy
    environment:
      # Redis Configuration
      REDIS_URL: redis://redis:6379
      REDIS_RATE_LIMIT_URL: redis://redis:6379
      
      # Database Configuration
      DATABASE_URL: postgresql://${POSTGRES_USER:-firecrawl}:${POSTGRES_PASSWORD:-your_secure_password_here}@postgres:5432/${POSTGRES_DB:-firecrawl}
      
      # Playwright Service
      PLAYWRIGHT_MICROSERVICE_URL: http://playwright-service:3000
      
      # API Configuration
      PORT: 3002
      HOST: 0.0.0.0
      
      # Optional: Authentication (uncomment if needed)
      # SUPABASE_URL: ${SUPABASE_URL}
      # SUPABASE_ANON_KEY: ${SUPABASE_ANON_KEY}
      # SUPABASE_SERVICE_TOKEN: ${SUPABASE_SERVICE_TOKEN}
      
      # Optional: Rate limiting and monitoring
      RATE_LIMIT_TEST_MODE: false
      
      # Optional: LLM providers (uncomment as needed)
      # OPENAI_API_KEY: ${OPENAI_API_KEY}
      # ANTHROPIC_API_KEY: ${ANTHROPIC_API_KEY}
      
      # Security
      NUM_WORKERS_PER_QUEUE: 8
      WORKER_TIMEOUT: 300
      
    networks:
      - firecrawl-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:3002/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    labels:
      # Traefik labels for Dokploy
      - "traefik.enable=true"
      - "traefik.http.routers.firecrawl.rule=Host(`${FIRECRAWL_DOMAIN:-firecrawl.example.com}`)"
      - "traefik.http.routers.firecrawl.entrypoints=websecure"
      - "traefik.http.routers.firecrawl.tls.certresolver=letsencrypt"
      - "traefik.http.services.web.loadbalancer.server.port=3002"
      - "traefik.http.routers.firecrawl.service=web"

volumes:
  redis_data:
    driver: local
  postgres_data:
    driver: local

networks:
  firecrawl-network:
    driver: bridge